- name: ensure vpc exists
  ec2_vpc_net:
    name: "{{ env }}"
    cidr_block: "{{ cidr }}"
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
  register: vpc_create

- name: create subnets
  ec2_vpc_subnet:
    cidr: "{{ item.cidr }}"
    az: "{{ item.zone }}"  # single subnet only
    vpc_id: "{{ vpc_create.vpc.id }}"
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
    tags:
      Public: "{{ item.public|string }}"
      Name: "{{ item.name }}"
      NatGateway: "{{ (item.nat_gateway | default('False')) | string }}"
  with_items: "{{ subnets }}"
  register: vpc_subnets

- name: obtain subnet info
  ec2_vpc_subnet_facts:
    filters:
      vpc-id: "{{ vpc_create.vpc.id }}"
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
  register: ec2_vpc_subnets


- name: create internet gateway
  ec2_vpc_igw:
    vpc_id: "{{ vpc_create.vpc.id }}"
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"

- name: create public route table
  ec2_vpc_route_table:
    tags:
      Name: public
    subnets: "{{ ec2_vpc_subnets | json_query('subnets[?tags.Public==`True`].id') }}"
    routes:
    - dest: 0.0.0.0/0
      gateway_id: igw
    vpc_id: "{{ vpc_create.vpc.id }}"
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"

- name: create NAT gateway
  ec2_vpc_nat_gateway:
    subnet_id: "{{ ec2_vpc_subnets | json_query('subnets[?tags.Name==`' + vpc_outbound_subnet + '`].id') | first }}"
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
    if_exist_do_not_create: yes
  register: nat_gateway
  when: vpc_outbound_subnet is defined

- name: select outbound subnets
  set_fact:
    outbound_subnets: "{{ ec2_vpc_subnets | json_query('subnets[?tags.Public==`False` && tags.NatGateway==`True`].id') }}"

- name: create outbound route table
  ec2_vpc_route_table:
    tags:
      Name: private
    subnets: "{{ outbound_subnets }}"
    routes:
    - dest: 0.0.0.0/0
      gateway_id: "{{ nat_gateway.nat_gateway_id }}"
    vpc_id: "{{ vpc_create.vpc.id }}"
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
  when: outbound_subnets

- name: create security groups
  ec2_group:
    name: "{{ item.name }}"
    rules: "{{ item.rules }}"
    vpc_id: "{{ vpc_create.vpc.id }}"
    region: "{{ region }}"
    profile: "{{ profile|default(omit) }}"
    description: "{{ item.name }}"
  with_items: "{{ security_groups }}"

# in a real VPC you'd want NAT gateways, Network ACLs
